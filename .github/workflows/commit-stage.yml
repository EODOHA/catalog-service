name: Commit Stage
on: push

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: eodoha/catalog-service
  VERSION: latest

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      
      - name: Code vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan
        with:
          path: "${{ github.workspace }}"
          fail-build: false
          severity-cutoff: high
      
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Install Dokcer Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Start Docker Compose services
        working-directory: catalog-service
        run: |
          docker-compose up -d

      - name: Get "config-service" container info
        run: |
          CONTAINER_ID=$(docker-compose ps -q config-service)

          if [ -z "$CONTAINER_ID" ]; then
            echo "Error: 'config-service' 컨테이너가 실행 중이지 않습니다."
            exit 1
          else
            echo "'config-service' 컨테이너 ID: $CONTAINER_ID"
          fi

          CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER_ID)
          echo "'config-service' 컨테이너 IP: $CONTAINER_IP"

          echo "CONTAINER_IP=$CONTAINER_IP" >> $GITHUB_ENV
      
      - name: Build, unit tests and integration tests
        working-directory: catalog-service
        env:
          CONFIG_SERVICE_IP: ${{ env.CONTAINER_IP }}
        run: |
          chmod +x gradlew
          ./gradlew build
  package:
    name: Package and Publish
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: [ build ]
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Build container image
        working-directory: catalog-service
        run: |
          chmod +x gradlew
          ./gradlew bootBuildImage --imageName ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
      - name: OCI image vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          fail-build: false
          severity-cutoff: high
          # acs-report-enable: true
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Log into container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish container image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
